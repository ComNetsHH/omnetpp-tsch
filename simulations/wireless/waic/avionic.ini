[Config _AvionicBase]
**.sf.typename = ${sf = "TschCLSF", "TschMSF"}
**.sfid = ${sf}
**.sf.numMinCells = 10 # originally 7
**.sf.disableHousekeeping = true
**.sf.startTime = uniform(2s, 3s)
**.host[*].**.sf.cellListRedundancy = 5

**.rpl.crossLayerEnabled = ${true, false ! sf}
**.rpl.numSkipTrickleIntervalUpdates = 5 # for faster topology convergence
**.rpl.daoEnabled = true
**.rpl.daoAckEnabled = true

# Host 0 acts as a layout configurator and distributes channel ranges between multiple sinks
**.host[0].rpl.disabled = true
**.host[0].rpl.multiGwConfigurator = true
**.host[0].rpl.layoutConfigurator = true
**.host[0].rpl.padX = 1 # distance between seats in a row
**.host[0].rpl.padY = 1 # distance between seat rows 
**.host[0].rpl.xAnchor = 10 # first sink's location
**.host[0].rpl.yAnchor = 50 # around which the layout will be generated

[Config _Waic]
# 6TiSCH
**.nbRadioChannels = 40

# WAIC Radio
*.sink[*].wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.sink[*].wlan[*].radio.centerFrequency = 4300MHz
*.sink[*].wlan[*].radio.bandwidth = 2.6MHz
*.sink[*].wlan[*].mac.channelHopping.centerFrequency = 4300MHz
#*.sink[*].wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
#*.sink[*].wlan[*].radio.centerFrequency = 4300MHz
*.host[*].wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.host[*].wlan[*].radio.centerFrequency = 4300MHz
#*.host[*].wlan[*].radio.receiver.centerFrequency = 4300MHz
#*.host[*].wlan[*].radio.transmitter.centerFrequency = 4300MHz
*.host[*].wlan[*].radio.bandwidth = 2.6MHz
*.host[*].wlan[*].mac.channelHopping.centerFrequency = 4300MHz

# WAIC Receiver Characteristics
*.sink[*].wlan[*].radio.receiver.sensitivity = -91dBm
*.sink[*].wlan[*].radio.receiver.energyDetection = -90dBm
*.sink[*].wlan[*].radio.receiver.snirThreshold = 6dB
*.host[*].wlan[*].radio.receiver.sensitivity = -91dBm
*.host[*].wlan[*].radio.receiver.energyDetection = -90dBm
*.host[*].wlan[*].radio.receiver.snirThreshold = 6dB

# WAIC SARPS Limits (modified to allow deeper multi-hop topologies)
*.sink[*].wlan[*].radio.transmitter.power = 0.000273mW # max WAIC tx power: 0.003273mW/2.6MHz = 0.00126mW/MHz = -29dBm/MHz EIRP
*.host[*].wlan[*].radio.transmitter.power = 0.000273mW # max WAIC tx power: 0.003273mW/2.6MHz = 0.00126mW/MHz = -29dBm/MHz EIRP

# 4.3GHz PHY Channel
**.radioMedium.pathLoss.typename = "FreeSpacePathLoss"
**.radioMedium.pathLoss.alpha = 2.5 # Cabin path loss coefficient assumed 2.5 to 2.8. For low distances we assume 2.5
**.radioMedium.backgroundNoise.power = -109dBm # For channel bandwidth 2.6MHz
**.radioMedium.backgroundNoise.bandwidth = 2.6MHz # 5MHz channel spacing, channelization overhead factor is 5 MHz/2.6 MHz = 1.92, according to ITU-R M.2283-0 
**.radioMedium.mediumLimitCache.centerFrequency = 4300MHz


[Config _HighDensity]
network = HighDensity
**.numSinks = ${sinks=1, 2, 3, 4, 5}
**.numHosts = ${hosts=50, 100, 200}

**.rpl.minHopRankIncrease = 2 # to prevent too frequent topology changes

**.sf.maxNumCells = intuniform(20, 30)
**.sf.upperCellUsageLimit = 0.8


**.sink[*].rpl.clPhase2Timeout = 500 # to allow sink collect all the DAOs, AND clear unnecessary cells, was set to 600 then 400

*.host[1..].app[0].sendInterval = uniform(40s, 60s)
#*.host[1..].app[0].sendInterval = exponential(60s)
*.host[1..].numApps = 1
**.host[*].app[0].destAddresses = ""

*.host[0].mobility.initialX = 0m
*.host[0].mobility.initialY = 0m
# First sink's position is used as anchor to generate layout 
*.sink[0].mobility.initialX = 10m
*.sink[0].mobility.initialY = 50m

**.app[0].startTime = uniform(600s, 620s) # give enough time for CLX second phase
**.app[0].stopTime = 1400s

[Config Branches]
network = Branches
repeat = 15
**.numHosts = 31

# Decrease TX power to construct deep, multi-hop `tree  
*.host[*].wlan[*].radio.transmitter.power = 0.005mW
*.sink[*].wlan[*].radio.transmitter.power = 0.005mW

*.sink[0].mobility.initialX = 20m
**.host[0].mobility.initialX = 0m
**.host[0].mobility.initialY = 0m

*.host[0].rpl.branchesLayout = true
*.host[0].rpl.numBranches = 3
*.host[0].rpl.padY = 4
*.host[0].rpl.padX = 2
**.rpl.minHopRankIncrease = 1

**.app[0].sendInterval = uniform${traffic=(0.5s, 1s), (20s, 30s)}

# 2..10 hops
*.host[*2].numApps = ${hops=1, 0, 0, 0, 0, 0, 0, 0, 0}
*.host[*3].numApps = ${0, 1, 0, 0, 0, 0, 0, 0, 0 !hops}
*.host[*4].numApps = ${0, 0, 1, 0, 0, 0, 0, 0, 0 !hops}
*.host[*5].numApps = ${0, 0, 0, 1, 0, 0, 0, 0, 0 !hops}
*.host[*6].numApps = ${0, 0, 0, 0, 1, 0, 0, 0, 0 !hops}
*.host[*7].numApps = ${0, 0, 0, 0, 0, 1, 0, 0, 0 !hops}
*.host[*8].numApps = ${0, 0, 0, 0, 0, 0, 1, 0, 0 !hops}
*.host[*9].numApps = ${0, 0, 0, 0, 0, 0, 0, 1, 0 !hops}
*.host[*0].numApps = ${0, 0, 0, 0, 0, 0, 0, 0, 1 !hops}

*.host99.numApps = ${hopCount=2..10 ! hops} # dummy parameter to store hops counter
**.host98.numApps = ${trafficType=1, 0 ! traffic} # dummy parameter to filter high/low traffic intensity in run query
measurement-label = ${"hops=${hopCount}"}
experiment-label = ${SmokeAlarm, HumidityMonitoring ! traffic}

[Config IsmHighDensity]
extends = _HighDensity, _AvionicBase

[Config WaicHighDensity]
extends = _Waic, _HighDensity, _AvionicBase
repeat = 15

**.rpl.gridColumnsGapMultiplier = 3
**.rpl.padX = 0.5
**.rpl.padY = 0.5

**.wlan[*].radio.transmitter.power = 0.00005mW


