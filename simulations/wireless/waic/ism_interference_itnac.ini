########################################################################################################################################################################
#######################################################################  	LAYOUT SETTINGS		########################################################################
########################################################################################################################################################################

**.mobility.initFromDisplayString = false # ignore displayString positions

# User layout settings
*.sink[*].mobility.constraintAreaMinX = ${minX} # 0
*.sink[*].mobility.constraintAreaMaxX = 34m

*.user*[*].mobility.typename = "FlexibleGridMobility"
*.user*[*].mobility.numHosts = ${usersPerGroup = int(${numUsers} / 2)}
*.user*[*].mobility.columns = ${cols} # 3
*.user*[*].mobility.marginX = 0
*.user*[*].mobility.marginY = 0
*.user*[*].mobility.separationX = ${pX}
*.user*[*].mobility.separationY = ${pY}

*.user*[*].mobility.resetRowAtNodeIndex = ${usersPerGroup}

*.user*[*].mobility.constraintAreaMinX = parentIndex() <  ${numUsers} / 2 ? ${minX} : (${minX} + ${pX} * (${cols} + 1))
*.user*[*].mobility.constraintAreaMaxX = this.constraintAreaMinX + ${pX} * ${cols}

*.user*[*].mobility.constraintAreaMinY = 2m
*.user*[*].mobility.constraintAreaMaxY = this.constraintAreaMinY + ${pY} * (${numUsers} / 2 / ${cols})

*.sink[*].mobility.constraintAreaMinY = 2m
*.sink[*].mobility.constraintAreaMaxY = this.constraintAreaMinY + ${pY} * (${numUsers} / 2 / ${cols})

*.sink[0].mobility.initialX = this.constraintAreaMinX + ${pX} * ${cols}
*.sink[0].mobility.initialY = this.constraintAreaMinY + ${pY} * int(${numUsers} / 2 / ${cols}) / 2

*.user1[*].mobility.gridOffsetX = -2.35
*.user1[*].mobility.gridOffsetY = 0.95

# server layout
*.server*.mobility.typename = "StationaryMobility"
*.server*.mobility.constraintAreaMaxX = 1000m
*.server*.mobility.constraintAreaMaxY = 1000m
*.server*.mobility.constraintAreaMaxZ = 5m

*.server1*.mobility.initialX = ${minX}
*.server1*.mobility.initialY = ${yOffset = 33m} - 5m	
*.server1*.mobility.initialZ = 3.82m 

# router layout
*.r*.mobility.typename = "StationaryMobility"
*.r*.mobility.constraintAreaMaxX = 1000m
*.r*.mobility.constraintAreaMaxY = 1000m
*.r*.mobility.constraintAreaMaxZ = 5m

*.r1*.mobility.initialX = ${minX} - 2m
*.r1*.mobility.initialY = ${yOffset} + 1.69m	
*.r1*.mobility.initialZ = 3.82m 

# access point layout
*.ap*[*].mobility.typename = "StationaryMobility"
*.ap*[*].mobility.constraintAreaMaxX = 1000m
*.ap*[*].mobility.constraintAreaMaxY = 1000m
*.ap*[*].mobility.constraintAreaMaxZ = 5m

*.ap1[*].mobility.initialX = ${minX} - 30m + parentIndex()*35m # x offset of the aircraft1 + offset from the front most node
*.ap1[*].mobility.initialY = ${yOffset} + 3.69m
*.ap1[*].mobility.initialZ = 3.82m

########################################################################################################################################################################
#######################################################################  	RADIO SETTINGS		########################################################################
########################################################################################################################################################################

**.backgroundNoise.power = nan
*.radioMedium.backgroundNoise.powerSpectralDensity = -113dBmWpMHz

# NIC settings
*.user*[*].wlan[*].typename = "Ieee80211Interface"
*.user*[*].wlan[*].mac.typename = "Ieee80211Mac"
*.user*[*].wlan[*].radio.typename = "Ieee80211DimensionalRadio"
*.user*[*].wlan[*].radio.channelNumber = 0
*.user*[*].wlan[*].mgmt.numChannels = 14

*.ap*[*].wlan[*].typename = "Ieee80211Interface"
*.ap*[*].wlan[*].mac.typename = "Ieee80211Mac"
*.ap*[*].wlan[*].radio.typename = "Ieee80211DimensionalRadio"
*.ap*[0].wlan[*].radio.channelNumber = 0
*.ap*[1].wlan[*].radio.channelNumber = 5
*.ap*[2].wlan[*].radio.channelNumber = 10

# AP transmission powers according to project input
*.ap*[0].wlan[*].radio.transmitter.power = 0.0079W
*.ap*[1].wlan[*].radio.transmitter.power = 0.002W
*.ap*[2].wlan[*].radio.transmitter.power = 0.002W
*.ap*[*].wlan[*].radio.receiver.sensitivity = -85dBm
*.ap*[*].wlan[*].radio.receiver.energyDetection = -85dBm
*.ap*[*].wlan[*].radio.receiver.snirThreshold = 4dB

*.user*[*].wlan[*].radio.transmitter.power = 0.02W
*.user*[*].radio.receiver.sensitivity = -85dBm
*.user*[*].radio.receiver.energyDetection = -85dBm
*.user*[*].radio.receiver.snirThreshold = 4dB

**.wlan[*].radio.receiver.snirThresholdMode = "mean"
**.wlan[*].radio.receiver.errorModel.snirMode = "mean"

*.user*[*].wlan[*].radio.transmitter.preambleDuration = 6us
*.ap*[*].wlan[*].radio.transmitter.preambleDuration = 6us

# set freq. gains for WiFi modules
*.user*[*].wlan[*].radio.transmitter.frequencyGains = "left c-b*1.5 -40dB linear c-b -28dB linear c-b*0.5-1MHz -20dB linear c-b*0.5+1MHz 0dB linear c+b*0.5-1MHz 0dB linear c+b*0.5+1MHz -20dB linear c+b -28dB linear c+b*1.5 -40dB right"
*.ap*[*].wlan[*].radio.transmitter.frequencyGains = "left c-b*1.5 -40dB linear c-b -28dB linear c-b*0.5-1MHz -20dB linear c-b*0.5+1MHz 0dB linear c+b*0.5-1MHz 0dB linear c+b*0.5+1MHz -20dB linear c+b -28dB linear c+b*1.5 -40dB right"
*.dummySink.wlan[*].radio.transmitter.frequencyGains = "left c-b*1.5 -40dB linear c-b -28dB linear c-b*0.5-1MHz -20dB linear c-b*0.5+1MHz 0dB linear c+b*0.5-1MHz 0dB linear c+b*0.5+1MHz -20dB linear c+b -28dB linear c+b*1.5 -40dB right"

# set freq. gains for IEEE 802.15.4e modules
**.wlan[*].radio.transmitter.frequencyGains = "left c-5MHz -40dB linear c-2MHz -20dB linear c-1MHz 0dB either c+1MHz 0dB linear c+2MHz -20dB linear c+5MHz -40dB right" 
#**.wlan[*].radio.transmitter.frequencyGains = "left s 0dB either e 0dB right"
#**.wlan[*].radio.transmitter.frequencyGains =  "left c-3.5MHz 0dB linear c+3.5MHz 0dB right"

########################################################################################################################################################################
#################################################################		TCP/WLAN SETTINGS		########################################################################
########################################################################################################################################################################
# Ethernet NIC configuration
**.eth[*].mac.queue.typename = "EtherQosQueue"
**.eth[*].mac.queue.dataQueue.typename = "DropTailQueue" # in routers
**.eth[*].mac.queue.dataQueue.packetCapacity = 10  # in routers

# Some tcp settings
**.tcp.typename = "Tcp"
**.tcp.tcpAlgorithmClass = "TcpNewReno"
**.tcp.windowScalingSupport = true
**.dataTransferMode = "object"
**.tcp.mss = 1460                 # MTU-TCPheader-IPheader=1500-20-20=1460
**.tcp.advertisedWindow = 1460000 # do not use this.mss - directly give a number

**.opMode = "b"#"n(mixed-2.4Ghz)" #"g(mixed)"
*.user*[*].wlan[*].radio.antenna.numAntennas = 1#2
*.ap*[*].wlan[*].radio.antenna.numAntennas = 1#2
*.user*[*].wlan[*].bitrate = 2Mbps#144.4Mbps
*.ap*[*].wlan[*].bitrate = 2Mbps
*.user*[*].**.address = "auto"
*.ap*[*].**.address = "auto"

#**.maxQueueSize = 14
**.wlan[*].mac.dcf.rtsPolicy.rtsThreshold = 3000B
**.wlan[*].mac.cwMinData = 7
**.wlan[*].mac.cwMinMulticast = 31

**.mgmt.frameCapacity = 50

# analog model
**.analogModel.ignorePartialInterference = false

# access point configuration
#**.idleInterval = 1s
*.ap1[*].wlan[0].mgmt.beaconInterval = 10s
*.ap1[0].wlan[0].mgmt.ssid = "alpha1"
*.ap1[1].wlan[0].mgmt.ssid = "beta1"
*.ap1[2].wlan[0].mgmt.ssid = "gamma1"

*.user1[0..32].wlan[0].agent.defaultSsid = "alpha1"
*.user1[99..131].wlan[0].agent.defaultSsid = "alpha1"
*.user1[33..65].wlan[0].agent.defaultSsid = "beta1"
*.user1[132..164].wlan[0].agent.defaultSsid = "beta1"
*.user1[66..98].wlan[0].agent.defaultSsid = "gamma1"
*.user1[165..198].wlan[0].agent.defaultSsid = "gamma1"

*.r*.**.raEnabled = true

########################################################################################################################################################################
############################################################## 		TCP APPLICATION SETTINGS		####################################################################
########################################################################################################################################################################

########## Video stream application ########## 
# server
*.server*.numApps = 2		
*.server*.app[0].typename = "TcpGenericServerApp"
*.server*.app[0].localPort = 80
*.server*.app[0].replyDelay = 0

*.server*.app[1].typename = "ResaUdpVideoStreamServer"
*.server*.app[1].videoSize = 20MiB#105MiB # 1minute HD video = 105MiB
*.server*.app[1].sendInterval = 100ms
*.server*.app[1].jitter = uniform(1ms, 10ms)
*.server*.app[1].packetLen = 1000B
*.server*.app[1].localPort = 3088

# clients
*.user*[*].numApps = 2
*.user*[*].app[0].typename = "ResaUdpVideoStreamClient"
*.user1[*].app[0].serverAddress = "server1"
*.user*[*].app[0].localPort = 9999
*.user*[*].app[0].serverPort = 3088
*.user*[*].app[0].startTime = ${warmup}s + uniform(0s, 100s)

*.user*[*].app[1].typename = "TschTcpReSaBasicClientApp"#"TcpBasicClientApp"
*.user*[*].app[1].localPort = -1
*.user*[*].app[1].connectAddress = "server1"
*.user*[*].app[1].numRequestsPerSession = int(exponential(5))
*.user*[*].app[1].thinkTime = 1s #time gap between requests
*.user*[*].app[1].idleInterval = 1s*exponential(60) #time gap between sessions
*.user*[*].app[1].replyLength = 1B*int(exponential(2000))
*.user*[*].app[1].requestLength = 1B*int(truncnormal(350,20))
*.user*[*].app[1].connectPort = 80
*.user*[*].app[1].startTime = ${simtime}s

########################################################################################################################################################################
###################################################################		RECORDING SETTINGS		########################################################################
########################################################################################################################################################################

*.user*[*].**.vector-recording = true
*.user*[*].**.scalar-recording = true
*.ap*[*].**.vector-recording = true
*.ap*[*].**.scalar-recording = true
*.server*.**.vector-recording = false
*.server*.**.scalar-recording = false