[Config _TestBase]
network = Generic
warmup-period = ${warmup = 200}s
sim-time-limit = ${simtime = 800s}
**.daoEnabled = false # we don't need downlink messages
**.daoAckEnabled = false

# Do not add or delete cells at all
**.sf.lowerCellUsageLimit = -1
**.sf.upperCellUsageLimit = 1.1
#**.sf.showQueueUtilization = true
**.sf.showTxCellCount = true # display number of scheduled dedicated TX cells above node in GUI
**.sf.handleRankUpdates = true # needed to schedule pre-calculated amount of uplink cells (minimum required to handle the traffic)
#**.sf.queueRecordingPeriod = ${queueRecPeriod = 0.2, 1}

# Mobility (straight line)
*.sink[*].mobility.initialX = 15m
*.sink[*].mobility.initialY = 20m

**.queueLength = 9999 # no packets are lost due to queue overflow

# Cleaning up IPv6 neighbor discovery clutter
**.ipv6.neighbourDiscovery.raEnabled = false
**.ipv6.neighbourDiscovery.skipDad = true
#**.ipv6.neighbourDiscovery.addRandomDelays = true

**.sf.showQueueSize = true
**.sf.disableHousekeeping = false
**.channelHopping.useRandomPattern = true
#**.channelHopping.pattern = "17" # disabled hopping
**.mac.ignoreBitErrors = true
**.mac.macMaxFrameRetries = 0
**.macSlotframeSize = ${sfSize = 100}
**.sf.numMinCells = 2

*.host[*].mobility.typename = "StaticGridMobility"
**.mobility.constraintAreaMaxX = 120m
*.host[*].mobility.constraintAreaMinX = 17m
*.host[*].mobility.constraintAreaMinY = 10m
*.host[*].mobility.numHosts = 10
*.host[*].mobility.columns = 10
*.host[*].mobility.rows = 1
*.host[*].mobility.marginX = 5m
*.host[*].mobility.separationX = 10m
*.host[*].mobility.separationY = 20m

# Apps
*.host[*].numApps = 1
*.host[*].app[*].startTime = uniform(${warmup}s - 100s, ${warmup}s - 90s) # some warmup period
*.sink[*].app[*].startTime = ${warmup}s - 100s
*.sink[*].app[*].typename = "UdpSink"

**host[*].app[*].typename = "TschUdpBasicApp"

**.app**.result-recording-modes= default
**.mac**.interarrivalTime.result-recording-modes= default
**.mac**.pktEnqueued.result-recording-modes= default
**.result-recording-modes= -

[Config Debugging]
extends = _TestBase
*.numHosts = 1

*.sink[*].numApps = 0
*.lambda = 5
*.host[*].app[*].sendInterval = 10s
*.host[*].app[*].stopTime = ${simtime} - 500s


[Config DelayTest_MD1]
description = Simulating a sequence of MD1 queues
extends = _TestBase
result-dir = DelayTest_MD1
repeat = 50
#*.lambda = ${l = 0.2, 0.4, 0.6, 0.8, 1, 1.3, 1.6, 2, 2.4}
#*.lambda = ${l = 1..5}
#*.lambda = ${l = 0.25, 0.4, 0.5, 0.8, 1}
*.lambda = ${l = 0.1..1 step 0.1}

*.numHosts = ${N=1, 7}

# To measure e2e delay for each node, its application connects to unique port/application at the sink 
*.sink[*].numApps = ${N}
*.sink[*].app[*].localPort = 1000 + index()
*.host[*].app[0].destPort = 1000 + parentIndex()
*.host[*].app[*].sendInterval = exponential(1.01s/${l}) # poissonian arrivals
*.host[*].app[*].stopTime = ${simtime} - 100s

[Config DelayTest_DD1]
description = Simulating a sequence of DD1 queues
extends = DelayTest_MD1
result-dir = DelayTest_DD1
*.host[*].app[*].sendInterval = ${sfSize}/100 / ${l} * 1s # deterministic arrivals with period T = slotframe_duration (in seconds) / arrival_rate
*.host[*].app[*].stopTime = ${simtime} - 150s

[Config DelayTest_DD1_Lossy]
extends = DelayTest_DD1
result-dir = DelayTest_DD1_Lossy
**.mac.pLinkCollision = ${pc=0.2, 0.8}
**.mac.macMaxFrameRetries = ${rtxThresh = 3}
**.lossyLinkTimeout = ${warmup}s
*.host[*].**.sf.noRtxQueuing = true

[Config ArrivalRateTest_MD1]
description = Measuring arrival rate: N hosts send UDP packets to sink 
extends = _TestBase
repeat = 10
*.numHosts = ${N=1..10}
*.lambda = ${l=1}
*.sink[*].numApps = 2
*.sink[*].app[0].localPort = 1000
*.sink[*].app[1].typename = "UdpBasicApp"
*.sink[*].app[1].sendInterval = exponential(1s/${l})
*.sink[*].app[1].destPort = 1000
*.sink[*].app[1].destAddresses = "sink[0](ipv6)"
*.sink[*].app[1].messageLength = 50B


*.host[*].app[0].destPort = 1000
*.host[*].app[*].sendInterval = exponential(1s/${l}) # poissonian arrivals



