[Config _TestBase]
network = Generic
warmup-period = 100s
sim-time-limit = 1000s
**.daoEnabled = false # we don't need downlink messages
**.daoAckEnabled = false

# Do not add or delete cells at all
**.sf.lowerCellUsageLimit = -1
**.sf.upperCellUsageLimit = 1.1
#**.sf.showQueueUtilization = true
**.sf.showTxCellCount = true # display number of scheduled dedicated TX cells above node in GUI
**.sf.handleRankUpdates = true # needed to schedule pre-calculated amount of uplink cells
#**.sf.queueRecordingPeriod = ${queueRecPeriod = 0.2, 1}

# Mobility (straight line)
*.sink[*].mobility.initialX = 15m
*.sink[*].mobility.initialY = 20m

*.host[*].mobility.typename = "StaticGridMobility"
**.mobility.constraintAreaMaxX = 120m
*.host[*].mobility.constraintAreaMinX = 17m
*.host[*].mobility.constraintAreaMinY = 10m
*.host[*].mobility.numHosts = 10
*.host[*].mobility.columns = 10
*.host[*].mobility.rows = 1
*.host[*].mobility.marginX = 5m
*.host[*].mobility.separationX = 10m
*.host[*].mobility.separationY = 20m

# Apps
*.host[*].numApps = 1
*.host[*].app[*].startTime = uniform(100s, 110s) # some warmup period
*.sink[*].app[*].startTime = 100s # should be at the same or even before the host app starts!
*.sink[*].app[*].typename = "UdpSink"

[Config DelayTest_MD1]
description = Simulating a sequence of MD1 queues
extends = _TestBase
result-dir = DelayTest_MD1
repeat = 10
*.lambda = ${l = 0.4, 0.8, 1, 2}
*.numHosts = ${N=10}

# To measure e2e delay for each node, its application connects to unique port/application at the sink 
*.sink[*].numApps = ${N}
*.sink[*].app[*].localPort = 1000 + index()
*.host[*].app[0].destPort = 1000 + parentIndex()
*.host[*].app[*].sendInterval = exponential(1s/${l}) # poissonian arrivals

[Config DelayTest_DD1]
description = Simulating a sequence of DD1 queues
extends = DelayTest_MD1
result-dir = DelayTest_DD1
*.host[*].app[*].sendInterval = 1/${l} * 1s # deterministic arrivals

[Config ArrivalRateTest_MD1]
description = Measuring arrival rate: N hosts send UDP packets to sink 
extends = _TestBase
repeat = 10
*.numHosts = ${N=1..10}
*.lambda = ${l=1}
*.sink[*].numApps = 2
*.sink[*].app[0].localPort = 1000
*.sink[*].app[1].typename = "UdpBasicApp"
*.sink[*].app[1].sendInterval = exponential(1s/${l})
*.sink[*].app[1].destPort = 1000
*.sink[*].app[1].destAddresses = "sink[0](ipv6)"
*.sink[*].app[1].messageLength = 50B


*.host[*].app[0].destPort = 1000
*.host[*].app[*].sendInterval = exponential(1s/${l}) # poissonian arrivals



