[General]
num-rngs = 3
check-signals = false # remove this and change modules accordingly
*.cmdenv-log-level=detail
**.result-recording-modes=default,-histogram
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 2

include common.ini
#include delay_testing.ini
#include avionic.ini

# Lukas' scenarios
[Config _6tischEvaluationBase]
network = SixtischEvaluation
sim-time-limit = ${simLimit = 1000s}
repeat = 10
*.numHosts = 1

**.sink[0].mobility.typename = "StationaryMobility"
**.host[0].mobility.typename = "StationaryMobility"
*.sink[0].mobility.initialX = 20m
*.sink[0].mobility.initialY = 30m
*.host[0].mobility.initialX = 30m
*.host[0].mobility.initialY = 30m

**.rpl.daoEnabled = false
**.numApps = 1
**.app[0].startTime = ${appStart = 50s}
**.app[0].stopTime = ${simLimit} - 100s

**.sf.maxNumCells = 100

**.sf.lowerCellUsageLimit = -1
**.sf.upperCellUsageLimit = 0.9

[Config DelayTestMD1]
extends = _6tischEvaluationBase
sim-time-limit = 5000s
warmup-period = 2000s
result-dir = DelayTestMD1
**.sf.maxNumCells = 250
**.sf.lowerCellUsageLimit = ${limCellUsedLow = -1} # , 0.2, 0.4, 0.5
**.sf.upperCellUsageLimit = ${limCellUsedHigh = 0.5, 0.75, 0.9}
*.host[0].app[0].sendInterval = exponential(1s/${l = 1..10})
**.app[0].stopTime = 5000s 

[Config DelayTestDD1]
extends = DelayTestMD1
result-dir = DelayTestDD1

*.host[0].app[0].sendInterval = 1s/${l}

[Config LossyLinkTest]
result-dir = LossyLink

warmup-period = ${warmup = 500s}
repeat = 20
extends = _6tischEvaluationBase

**.sf.upperCellUsageLimit = 1 # with 0.9 MSF often adds 3rd cell

*.host[0].app[0].sendInterval = 1s # keep lambda moderate to decrease number of TX cells required
# stop before the end of the simulation to receive queued packets 
*.host[0].app[0].stopTime = this.startTime + ${warmup} + 1000s # send ~1000 packets WITH link collision enabled

sim-time-limit = ${simTimeLimit = 3000s} # ~1500 packets sent in total, app stops at 1550s at the client, 
					   # the remaining ~1500s should be enough to transmit the remaining packets  
*.sink[0].app[0].stopTime = ${simTimeLimit} # sink is active until the very end, receiving queued packets 

**.mac.pLinkCollision = ${pc = 0.2..0.6 step 0.1}
**.mac.lossyLinkTimeout = ${warmup} # avoid losing 6P packets during traffic adaptation phase
**.mac.macMaxFrameRetries = ${rtxThresh = 0..7}
**.queueLength = 9000 # no packets are lost due to queue overflow

[Config MsfAdaptation]
extends = _6tischEvaluationBase
result-dir = MsfAdaptation

**.mac.macMaxFrameRetries = 0
**.sf.upperCellUsageLimit = 0.9 # add cells sparsely
**.sf.lowerCellUsageLimit = -1 # do not delete cells
**.sf.maxNumCells = ${maxCells = 20..100 step 20}
**.sf.cellsToAdd = ${cellToAdd = 1..5}
*.host[0].app[0].sendInterval = 1s/${l = 5..20}
*.host[0].app[0].stopTime = ${simLimit} - 50s

# Cheng-Wei's Scenarios
[Config _TopologyEvaluationBase]
network = TopologyEvaluation
repeat = 20
sim-time-limit = 500s
*.numHosts = ${hosts = 5, 20, 50, 100}

include waic_radio.ini

#**.slotframeLen = ${sl = 20, 50, 101}
**.macSlotframeSize = ${sl = 20, 50, 101}
**.showTxCellCount = true
**.sf.lowerCellUsageLimit = -1 # do not delete cells
**.sf.upperCellUsageLimit = 0.6 # allow more cell additions to reach the desired 6P request faster

**.rpl.daoEnabled = false
**.numApps = 1
**.app[0].startTime = 100s
*.host[*].app[0].sendInterval = exponential(1/${l = 0.5, 1, 2, 5, 10}) * 1s

[Config Linear]
result-dir = Linear
extends = _TopologyEvaluationBase

# record fail/success of the "last" 6P request required for stability condition
*.host[1].**.sf.trackFailed6pAddByNum = ${l} * (${hosts} - 1) + 1

# serves as an achor for topology
*.sink[0].mobility.initialX = ${sinkX = 10m}
*.sink[0].mobility.initialY = ${sinkY = 30m}
*.sink[0].mobility.typename = "StationaryMobility"

*.host[*].mobility.typename = "StaticLinearMobility"
*.host[*].mobility.separation = ${sep = 4m}
*.host[*].mobility.initialX = ${sinkX} + ${sep}
*.host[*].mobility.initialY = ${sinkY}

[Config Ring]
extends = Linear
result-dir = Ring
*.sink[0].mobility.initialY = ${sinkY} + 1m
*.sink[0].mobility.initialX = ${sinkX} + (${sep} + 1m) * ${hosts} / 2 

[Config Star]
result-dir = Star
extends = _TopologyEvaluationBase
*.sink[*].mobility.typename = "StationaryMobility"
*.host[*].mobility.typename = "StationaryMobility"

**.radio.transmitter.power = 1mW # so that all nodes reach the sink, creating a logical "star"

*.sink[0].mobility.constraintAreaMaxX = ${maxX = 50}m
*.sink[0].mobility.constraintAreaMaxY = ${maxY = 50}m
*.host[*].mobility.constraintAreaMaxX = ${maxX}m
*.host[*].mobility.constraintAreaMaxY = ${maxY}m
*.host[*].mobility.initialX = uniform(0, ${maxX}) * 1m
*.host[*].mobility.initialY = uniform(0, ${maxY}) * 1m

*.sink[0].mobility.initialX = ${maxX} / 2 * 1m
*.sink[0].mobility.initialY = ${maxY} / 2 * 1m

[Config SampleScenarioLukas]
network = Generic
repeat = 30
*.numHosts = ${N = 1, 2, 3}
*.sink[0].mobility.initialX = 10m
*.sink[0].mobility.initialY = 10m
*.host[0].mobility.initialX = 20m
*.host[0].mobility.initialY = 10m
*.host[1].mobility.initialX = 30m
*.host[1].mobility.initialY = 10m
*.host[2].mobility.initialX = 40m
*.host[2].mobility.initialY = 10m

**.mac.macMaxFrameRetries = 3

**.numApps = 1 # each module has only 1 app
**.app[0].startTime = uniform(20s, 30s) # give some warmup period for 6TiSCH scheduling and RPL 
**.host[*].app[0].sendInterval = exponential(1s) # poissonian arrivals

[Config AltimeterTesting]
extends = Linear

include waic_radio.ini

*.numAltimeters = 1

**.radioMedium.analogModel.typename = "WaicDimensionalAnalogModel"

*.radioAltimeter[*].mobility.constraintAreaMinX = 0m
*.radioAltimeter[*].mobility.constraintAreaMinY = 0m
*.radioAltimeter[*].mobility.constraintAreaMaxX = 100m
*.radioAltimeter[*].mobility.constraintAreaMaxY = 150m
*.radioAltimeter[*].mobility.initialX = 3m
*.radioAltimeter[*].mobility.initialY = 11m
*.radioAltimeter[*].mobility.initFromDisplayString = false

*.radioAltimeter[*].**.rpl.disabled = true
*.radioAltimeter[*].**.sf.disabled = true
*.radioAltimeter[*].numApps = 0







 