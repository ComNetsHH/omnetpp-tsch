[General]
num-rngs = 3
check-signals = false # remove this and change modules accordingly
*.cmdenv-log-level=detail
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 1

include common.ini
include delay_testing.ini
#include waic_radio.ini
#include avionic.ini

[Config SampleScenarioCheng]
network = Linear
*.numHosts = 4

*.sink[0].mobility.initialX = 10m
*.sink[0].mobility.initialY = 10m
*.host[0].mobility.initialX = 20m
*.host[0].mobility.initialY = 10m
*.host[1].mobility.initialX = 20m
*.host[1].mobility.initialY = 20m
*.host[2].mobility.initialX = 30m
*.host[2].mobility.initialY = 10m
*.host[3].mobility.initialX = 30m
*.host[3].mobility.initialY = 20m

# manual broken link simulation
*.host[*].**.mac.packetDropThreshold = 0.1
*.host[1].**.mac.lossyLinkTimeout = 40s
*.host[2].rpl.unreachabilityDetectionEnabled = true

**.numApps = 1
**.app[0].startTime = uniform(20s, 30s)
**.host[*].app[0].sendInterval = exponential(1s)

**.mac.macMaxFrameRetries = 2

[Config SampleScenarioLukas]
network = Linear
repeat = 10
*.numHosts = ${N = 1, 2, 3}
*.sink[0].mobility.initialX = 10m
*.sink[0].mobility.initialY = 10m
*.host[0].mobility.initialX = 20m
*.host[0].mobility.initialY = 10m
*.host[1].mobility.initialX = 30m
*.host[1].mobility.initialY = 10m
*.host[2].mobility.initialX = 40m
*.host[2].mobility.initialY = 10m

**.mac.macMaxFrameRetries = 3

**.numApps = 1 # each module has only 1 app
**.app[0].startTime = uniform(20s, 30s) # give some warmup period for 6TiSCH scheduling and RPL 
**.host[*].app[0].sendInterval = exponential(1s) # poissonian arrivals

# Scenario for Louis
[Config SimpleWaic]
#extends = _Waic
network = SimpleWaic

## Define your scenarios here

**.radio.transmitter.power = 0.03273mW # original WAIC TX power 

*.numHosts = 10

**.hasIpv4 = true
**.hasIpv6 = false

# TODO: Redefine using StaticGridMobility to construct aircraft-like scenario 
*.host[*].mobility.initialX = uniform(10m, 30m)
*.host[*].mobility.initialY = uniform(10m, 70m)

**.mobility.initFromDisplayString = false

*.sink[0].mobility.initialX = 15m
*.sink[0].mobility.initialY = 35m

*.host[*].numApps = 1
*.host[*].app[0].destAddresses = "sink[0]"
*.host[*].app[0].startTime = uniform(60s, 100s)
*.host[*].app[0].sendInterval = uniform(1s, 2s)

# UDP sink app doesn't register socket properly (with Ipv4), use TschUdpEchoApp
*.sink[0].app[0].typename = "TschUdpEchoApp"

**.sf.upperCellUsageLimit = 0.7 # MSF adds cells if cell utilization exceeds this threshold

# experimental feature to add random delays in uniform(1s, 5s) range tp each outgoing 6P packet
# to reduce contention 
**.sf.send6pDelayed = true 




 