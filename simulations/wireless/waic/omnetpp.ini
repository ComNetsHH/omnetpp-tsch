[General]
num-rngs = 3
check-signals = false # remove this and change modules accordingly
*.cmdenv-log-level=detail
**.mobility.rng-0 = 1
**.wlan[*].mac.rng-0 = 1

# PHY
*.radioMedium.typename = "Ieee802154NarrowbandDimensionalRadioMedium"
**.radioMedium.pathLoss.typename = "FreeSpacePathLoss"
**.radioMedium.pathLoss.alpha = 2.5
**.analogModel.typename = "DimensionalAnalogModel"
**.signalAnalogRepresentation = "dimensional"
*.radioMedium.radioModeFilter = false
**.dimensions = "time frequency"
**.backgroundNoise.power = -110dBm

*.sink*.wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.sink*.wlan[*].radio.centerFrequency = 2.412GHz
*.sink[*].wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.sink[*].wlan[*].radio.centerFrequency = 2.412GHz
*.sink[*].wlan[*].radio.transmitter.power = 0.01mW
*.sink*.wlan[*].radio.receiver.sensitivity = -91dBm
*.sink*.wlan[*].radio.receiver.energyDetection = -90dBm
*.sink*.wlan[*].radio.receiver.snirThreshold = 6dB

*.host*.wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.host*.wlan[*].radio.centerFrequency = 2.412GHz
*.host[*].wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.host[*].wlan[*].radio.centerFrequency = 2.412GHz
*.host[*].wlan[*].radio.transmitter.power = 0.01mW
*.host[*].wlan[*].radio.receiver.sensitivity = -91dBm
*.host[*].wlan[*].radio.receiver.energyDetection = -90dBm
*.host[*].wlan[*].radio.receiver.snirThreshold = 6dB

# MAC
*.sink*.wlan[*].typename = "WirelessInterface"
*.sink*.wlan[*].mac.typename = "Ieee802154eInterface"
*.sink[*].wlan[*].typename = "WirelessInterface"
*.sink[*].wlan[*].mac.typename = "Ieee802154eInterface"
*.host[*].wlan[*].typename = "WirelessInterface"
*.host[*].wlan[*].mac.typename = "Ieee802154eInterface"
*.host*.wlan[*].typename = "WirelessInterface"
*.host*.wlan[*].mac.typename = "Ieee802154eInterface"

# Mobility
**.host[*].mobility.typename = "StationaryMobility"
**.host*.mobility.typename = "StationaryMobility"
**.sink*.mobility.typename = "StationaryMobility"
**.sink[*].mobility.typename = "StationaryMobility"
**.host*.mobility.initFromDisplayString = false
**.sink*.mobility.initFromDisplayString = false
*.host*.mobility.cmdenv-log-level=error
**.mobility.constraintAreaMaxX = 100m
**.mobility.constraintAreaMaxY = 150m
**.host[0].mobility.initialX = 0m
**.host[0].mobility.initialY = 0m
# First sink's position is used as anchor to generate layout 
**.sink[0].mobility.initialX = 17m
**.sink[0].mobility.initialY = 10m

# Layout configuration params (all values in meters)
**.host[0].rpl.layoutConfigurator = true
**.host[0].rpl.padX = 1 # distance between seats in a row
**.host[0].rpl.padY = 1 # distance between seat rows 
**.host[0].rpl.xAnchor = 10 # first sink's location
**.host[0].rpl.yAnchor = 50 # around which the layout will be generated	

# IP config
**.hasIpv6 = true
**.hasIpv4 = false
**.hasGn = false
#**.ipv6.disableDestCache = true				# custom, non-INET parameter, requires modified ipv6 src file 
#**.ipv6.allowLinkLocalFwd = true			# custom, non-INET parameter, requires modified ipv6 src file 
**.mtu = 1500B
**.neighbourDiscovery.addRandomDelays = true # custom, non-INET parameter, requires modified ipv6 src file
**.neighbourDiscovery.nceReachabilityOverride = 20000 # seconds
**.neighbourDiscovery.showNUDs = false # display number of Neighbor Unreachability triggers above node's icon, requires custom INET file

# SF
**.sf.housekeepingPeriod = 20s
**.sf.disableHousekeeping = true # not properly tested yet, leave it off for now
**.sf.startTime = 3s
**.sf.maxNumCells = 30 # number of elapsed cells after which cell estimation will take place
**.sf.lowerCellUsageLimit = 0.1
**.sf.numMinCells = 5 # broadcast cells for control traffic
**.sf.allowCellRemoval = true
**.sf.showDedicatedTxCells = true # displays dedicated cell locations above node's icon
**.sf.autoCellOnDemand = true # tricky parameter, use false for smaller networks (< 100 nodes)
#**.sf.allowMinimalCellsOverride = true # allow overwrite minimal cells with neighbors' auto cells

# 6TiSCH
**.nbRadioChannels = 16
**.macSlotframeSize = 101		
**.sixtischInterface.sf.typename = "TschMSF"
**.sfid = "TschMSF"
**.mac.mac.interfaceTableModule = ""

# RPL settings
**.sink[*].rpl.isRoot = true	
**.rpl.storing = true
**.rpl.drawConnectors = true
**.rpl.numSkipTrickleIntervalUpdates = 5 # for faster topology convergence
**.rpl.daoEnabled = true
**.rpl.daoAckEnabled = true
**.rpl.numDaoRetransmitAttempts = 20
**.rpl.assignParentManual = false
**.rpl.unreachabilityDetectionEnabled = false
**.rpl.networkProtocolModule = "^.ipv6.ipv6"
**.rpl.routingTableModule = "^.ipv6.routingTable"

**.host[0].rpl.disabled = true

# Common app settings
**.app[0].destPort = 1000
**.app[0].localPort = 1000
**.app[0].messageLength = 50B 
#**.app[0].startTime = uniform(300s, 320s)
**.app[0].startTime = uniform(500s, 520s)
*.host*.app[0].typename = "UdpBasicApp"
*.host*.app[0].destAddresses = "sink[0](ipv6)"
*.host[*].app[0].typename = "UdpBasicApp"
*.host[*].app[0].destAddresses = "sink[0](ipv6)"
**.host[0].numApps = 0

*.sink[*].numApps = 1
*.sink[*].app[0].typename = "UdpSink"

[Config Branches]
network = Branches
**.numHosts = 31
repeat = 10

# Decrease TX power to construct deep, multi-hop tree  
*.host[*].wlan[*].radio.transmitter.power = 0.005mW
*.sink[*].wlan[*].radio.transmitter.power = 0.005mW

*.sink[0].mobility.initialX = 20m

*.host[0].rpl.branchesLayout = true
*.host[0].rpl.numBranches = 3
*.host[0].rpl.padY = 4
*.host[0].rpl.padX = 2

**.app[0].sendInterval = uniform${traffic=(0.5s, 1s), (20s, 30s)}

# 2..10 hops
*.host[*2].numApps = ${hops=1, 0, 0, 0, 0, 0, 0, 0, 0}
*.host[*3].numApps = ${0, 1, 0, 0, 0, 0, 0, 0, 0 !hops}
*.host[*4].numApps = ${0, 0, 1, 0, 0, 0, 0, 0, 0 !hops}
*.host[*5].numApps = ${0, 0, 0, 1, 0, 0, 0, 0, 0 !hops}
*.host[*6].numApps = ${0, 0, 0, 0, 1, 0, 0, 0, 0 !hops}
*.host[*7].numApps = ${0, 0, 0, 0, 0, 1, 0, 0, 0 !hops}
*.host[*8].numApps = ${0, 0, 0, 0, 0, 0, 1, 0, 0 !hops}
*.host[*9].numApps = ${0, 0, 0, 0, 0, 0, 0, 1, 0 !hops}
*.host[*0].numApps = ${0, 0, 0, 0, 0, 0, 0, 0, 1 !hops}

*.host99.numApps = ${hopCount=2..10 ! hops} # dummy parameter to store hops counter
**.host98.numApps = ${trafficType=1, 0 ! traffic} # dummy parameter to filter high/low traffic intensity in run query
measurement-label = ${"hops=${hopCount}"}
experiment-label = ${SmokeAlarm, HumidityMonitoring ! traffic}

[Config HighDensity]
network = HighDensity
repeat = 10

**.numSinks = ${sinks=1, 2, 3, 4, 5, 6, 7}
**.numHosts = ${hosts=10, 30, 60, 100, 150, 200}
**.wlan[*].mac.mac.prioritizeApplicationData = true
**.sf.numMinCells = 7

**.rpl.minHopRankIncrease = 2 # to prevent too frequent topology changes

*.host[1..].app[0].sendInterval = uniform(10s, 20s)
*.host[1..].numApps = 1

**.sink[0].mobility.initialX = 10m
**.sink[0].mobility.initialY = 50m

**.app[0].startTime = uniform(400s, 420s)

[Config IsmHighDensity]
extends = HighDensity

[Config WaicHighDensity]
extends = HighDensity

# 6TiSCH
**.nbRadioChannels = 40

# WAIC Radio
*.sink*.wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.sink*.wlan[*].radio.centerFrequency = 4300MHz
*.sink*.wlan[*].radio.bandwidth = 2.6MHz
*.sink*.wlan[*].mac.channelHopping.centerFrequency = 4300MHz
#*.sink[*].wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
#*.sink[*].wlan[*].radio.centerFrequency = 4300MHz
*.host[*].wlan[*].radio.typename = "Ieee802154NarrowbandDimensionalRadio"
*.host[*].wlan[*].radio.centerFrequency = 4300MHz
#*.host[*].wlan[*].radio.receiver.centerFrequency = 4300MHz
#*.host[*].wlan[*].radio.transmitter.centerFrequency = 4300MHz
*.host[*].wlan[*].radio.bandwidth = 2.6MHz
*.host[*].wlan[*].mac.channelHopping.centerFrequency = 4300MHz

# WAIC Receiver Characteristics
*.sink*.wlan[*].radio.receiver.sensitivity = -91dBm
*.sink*.wlan[*].radio.receiver.energyDetection = -90dBm
*.sink*.wlan[*].radio.receiver.snirThreshold = 6dB
*.host[*].wlan[*].radio.receiver.sensitivity = -91dBm
*.host[*].wlan[*].radio.receiver.energyDetection = -90dBm
*.host[*].wlan[*].radio.receiver.snirThreshold = 6dB

# WAIC SARPS Limits
*.sink*.wlan[*].radio.transmitter.power = 0.000273mW   # max WAIC tx power: 0.003273mW/2.6MHz = 0.00126mW/MHz = -29dBm/MHz EIRP
*.host[*].wlan[*].radio.transmitter.power = 0.000273mW # max WAIC tx power: 0.003273mW/2.6MHz = 0.00126mW/MHz = -29dBm/MHz EIRP

# originally calculated 'realistic' TX power, replaced by extremely low value to enable deeper topology 
#*.host[*].wlan[*].radio.transmitter.power = 0.003273mW # max WAIC tx power: 0.003273mW/2.6MHz = 0.00126mW/MHz = -29dBm/MHz EIRP

# 4.3GHz PHY Channel
**.radioMedium.pathLoss.typename = "FreeSpacePathLoss"
**.radioMedium.pathLoss.alpha = 2.5 # Cabin path loss coefficient assumed 2.5 to 2.8. For low distances we assume 2.5
**.radioMedium.backgroundNoise.power = -109dBm # For channel bandwidth 2.6MHz
**.radioMedium.backgroundNoise.bandwidth = 2.6MHz # 5MHz channel spacing, channelization overhead factor is 5 MHz/2.6 MHz = 1.92, according to ITU-R M.2283-0 
**.radioMedium.mediumLimitCache.centerFrequency = 4300MHz

[Config DelayTest]
network = Linear
repeat = 5
*.numHosts = ${N=10}

**.showTxCellCount = true # display number of scheduled dedicated TX cells above node in GUI
**.daoEnabled = true
**.daoAckEnabled = false
# Do not add or delete cells at all
**.sf.lowerCellUsageLimit = -1
**.sf.upperCellUsageLimit = 1.1

# Mobility (straight line)
**.sink[*].mobility.initialX = 15m
**.sink[*].mobility.initialY = 20m

**.host[*].mobility.typename = "StaticGridMobility"
**.mobility.constraintAreaMaxX = 120m
**.host[*].mobility.constraintAreaMinX = 17m
**.host[*].mobility.constraintAreaMinY = 10m
**.host[*].mobility.numHosts = 10
**.host[*].mobility.columns = 10
**.host[*].mobility.rows = 1
**.host[*].mobility.marginX = 5m
**.host[*].mobility.separationX = 10m
**.host[*].mobility.separationY = 20m

**.host[0].rpl.disabled = false
**.host[0].rpl.layoutConfigurator = false

**.sf.showQueueUtilization = true
**.sf.showTxCellCount = true

# Apps
**.host[*].numApps = 1
**.host[*].app[*].sendInterval = exponential(1s) # Trying to simulate M/M/1 with lambda = 1
*.host[*].app[*].startTime = uniform(100s, 110s)
*.sink[*].app[*].startTime = 100s

# To measure delay for particular node
*.sink[*].numApps = ${N}
*.sink[*].app[*].typename = "UdpSink"
*.sink[*].app[*].localPort = 1000 + index()
*.host[*].app[0].destPort = 1000 + parentIndex()
 